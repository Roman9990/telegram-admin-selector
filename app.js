// –ü–û–õ–ù–´–ô –ö–û–î JAVASCRIPT –° API –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô
// –í–µ—Ä—Å–∏—è: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞

const AdminApp = {
    admins: [],
    currentTab: 'available',
    selectedAdmin: null,
    tg: window.Telegram?.WebApp,
    API_BASE_URL: 'http://localhost:8080/api'  // URL –±–æ—Ç–∞ API
};

// ======================== –£–¢–ò–õ–ò–¢–´ ========================

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function showLoading(container, message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    if (container) {
        container.innerHTML = `
            <div style="text-align: center; padding: 2rem;">
                <div style="font-size: 2rem; margin-bottom: 1rem;">‚è≥</div>
                <div style="color: rgba(255, 255, 255, 0.7);">${message}</div>
            </div>
        `;
    }
}

function createElement(tag, className = '', content = '') {
    const element = document.createElement(tag);
    if (className) element.className = className;
    if (content) element.innerHTML = content;
    return element;
}

// ======================== –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–û–ß–ï–ö –ê–î–ú–ò–ù–û–í ========================

function createAdminCard(admin) {
    const statusClass = admin.status === 'available' ? 'available' : 'unavailable';
    const statusText = admin.status === 'available' ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    const statusIcon = admin.status === 'available' ? '‚úÖ' : 'üî¥';
    const buttonDisabled = admin.status !== 'available' ? 'disabled' : '';
    const buttonText = admin.status === 'available' ? '–°–≤—è–∑–∞—Ç—å—Å—è' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    const buttonClass = admin.status === 'available' ? 'btn-primary' : 'btn-secondary';
    
    const role = admin.role || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    const description = admin.description || role;
    const rating = admin.rating || 0;
    const ratingStars = rating > 0 ? `‚≠ê${rating.toFixed(1)}` : '';
    
    const card = createElement('div', 'admin-card');
    card.dataset.adminTag = admin.tag;
    card.dataset.status = admin.status;
    
    card.innerHTML = `
        <div class="admin-header">
            <div class="admin-avatar">#</div>
            <div class="admin-info">
                <h3>#${escapeHtml(admin.tag)}</h3>
                <div class="admin-role">${escapeHtml(role)}</div>
                <p class="admin-desc">${escapeHtml(description)}</p>
                ${rating > 0 ? `<div class="admin-rating">${ratingStars}</div>` : ''}
            </div>
        </div>
        
        <div class="admin-status ${statusClass}">
            <span>${statusIcon}</span>
            <span>${statusText}</span>
        </div>
        
        <button class="btn ${buttonClass}" ${buttonDisabled}>
            ${buttonText}
        </button>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    if (admin.status === 'available') {
        card.addEventListener('click', () => selectAdmin(admin));
        
        // –≠—Ñ—Ñ–µ–∫—Ç ripple –ø—Ä–∏ –∫–ª–∏–∫–µ
        card.addEventListener('click', (e) => {
            createRippleEffect(card, e);
        });
    }
    
    return card;
}

function createRippleEffect(element, event) {
    const rect = element.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    
    const ripple = document.createElement('div');
    ripple.className = 'btn-ripple';
    ripple.style.cssText = `
        position: absolute;
        left: ${x}px;
        top: ${y}px;
        width: 0;
        height: 0;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.6);
        transform: translate(-50%, -50%);
        animation: ripple 0.6s linear;
        pointer-events: none;
    `;
    
    element.appendChild(ripple);
    
    setTimeout(() => {
        if (ripple.parentNode) {
            ripple.remove();
        }
    }, 600);
}

// ======================== API –ó–ê–ì–†–£–ó–ö–ê –ê–î–ú–ò–ù–û–í ========================

async function loadAdminsFromBot() {
    console.log('üîÑ –ó–ê–ì–†–£–ó–ö–ê –†–ï–ê–õ–¨–ù–´–• –ê–î–ú–ò–ù–û–í –ß–ï–†–ï–ó API –ë–û–¢–ê');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ API –±–æ—Ç–∞
        const response = await fetch(`${AdminApp.API_BASE_URL}/admins`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (data.success && Array.isArray(data.admins)) {
            AdminApp.admins = data.admins;
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.admins.length} —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–æ—Ç–∞!`);
            
            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∞–¥–º–∏–Ω–µ
            data.admins.forEach(admin => {
                console.log(`  - #${admin.tag}: ${admin.role} (${admin.status})`);
            });
            
            return data.admins;
        } else {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–æ—Ç–∞:', error);
        
        // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        AdminApp.admins = [];
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        showConnectionError(error.message);
        
        return [];
    }
}

function showConnectionError(errorMessage) {
    const availableContainer = document.getElementById('available-admins');
    const unavailableContainer = document.getElementById('unavailable-admins');
    
    const errorHtml = `
        <div style="text-align: center; padding: 2rem; background: rgba(255, 0, 0, 0.1); border-radius: 10px; margin: 1rem;">
            <div style="font-size: 2rem; margin-bottom: 1rem;">‚ö†Ô∏è</div>
            <h3 style="color: #ff6b6b; margin-bottom: 1rem;">–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É</h3>
            <p style="color: rgba(255, 255, 255, 0.8); margin-bottom: 1rem;">
                –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            </p>
            <p style="color: rgba(255, 255, 255, 0.6); font-size: 0.9rem;">
                ${errorMessage}
            </p>
            <button class="btn btn-primary" onclick="loadAdmins()" style="margin-top: 1rem;">
                üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            </button>
        </div>
    `;
    
    if (availableContainer) availableContainer.innerHTML = errorHtml;
    if (unavailableContainer) unavailableContainer.innerHTML = '';
}

// ======================== –ó–ê–ì–†–£–ó–ö–ê –ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï ========================

async function loadAdmins() {
    const availableContainer = document.getElementById('available-admins');
    const unavailableContainer = document.getElementById('unavailable-admins');
    const availableEmpty = document.getElementById('available-empty');
    const unavailableEmpty = document.getElementById('unavailable-empty');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    showLoading(availableContainer, '–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–æ—Ç–∞...');
    showLoading(unavailableContainer, '–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–æ—Ç–∞...');
    
    if (availableEmpty) availableEmpty.style.display = 'none';
    if (unavailableEmpty) unavailableEmpty.style.display = 'none';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–æ—Ç–∞
    await loadAdminsFromBot();
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    renderAdmins();
}

function renderAdmins() {
    const availableContainer = document.getElementById('available-admins');
    const unavailableContainer = document.getElementById('unavailable-admins');
    const availableEmpty = document.getElementById('available-empty');
    const unavailableEmpty = document.getElementById('unavailable-empty');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    if (availableContainer) availableContainer.innerHTML = '';
    if (unavailableContainer) unavailableContainer.innerHTML = '';
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const availableAdmins = AdminApp.admins.filter(admin => admin.status === 'available');
    const unavailableAdmins = AdminApp.admins.filter(admin => admin.status === 'unavailable');
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    if (availableAdmins.length === 0) {
        if (availableEmpty) {
            availableEmpty.style.display = 'block';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω—ã –≤–æ–æ–±—â–µ
            const emptyTitle = availableEmpty.querySelector('.empty-title');
            const emptyDesc = availableEmpty.querySelector('.empty-description');
            
            if (AdminApp.admins.length === 0) {
                if (emptyTitle) emptyTitle.textContent = '–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –≤ –±–∞–∑–µ';
                if (emptyDesc) emptyDesc.textContent = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_admin –≤ –±–æ—Ç–µ.';
            } else {
                if (emptyTitle) emptyTitle.textContent = '–í—Å–µ –∞–¥–º–∏–Ω—ã –∑–∞–Ω—è—Ç—ã';
                if (emptyDesc) emptyDesc.textContent = '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
        }
    } else {
        if (availableEmpty) availableEmpty.style.display = 'none';
        
        availableAdmins.forEach((admin, index) => {
            const card = createAdminCard(admin);
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            card.style.animationDelay = `${index * 0.1}s`;
            card.classList.add('animate-in');
            if (availableContainer) availableContainer.appendChild(card);
        });
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    if (unavailableAdmins.length === 0) {
        if (unavailableEmpty) unavailableEmpty.style.display = 'block';
    } else {
        if (unavailableEmpty) unavailableEmpty.style.display = 'none';
        
        unavailableAdmins.forEach((admin, index) => {
            const card = createAdminCard(admin);
            card.style.animationDelay = `${index * 0.1}s`;
            card.classList.add('animate-in');
            if (unavailableContainer) unavailableContainer.appendChild(card);
        });
    }
    
    console.log(`üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ: ${availableAdmins.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, ${unavailableAdmins.length} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö`);
}

// ======================== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –í–ö–õ–ê–î–ö–ê–ú ========================

function switchTab(tabName) {
    if (AdminApp.currentTab === tabName) return;
    
    AdminApp.currentTab = tabName;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.toggle('active', tab.dataset.tab === tabName);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.toggle('active', content.id === tabName);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    setTimeout(() => {
        const activeContent = document.getElementById(tabName);
        if (activeContent) {
            activeContent.querySelectorAll('.admin-card').forEach((card, index) => {
                card.style.animationDelay = `${index * 0.05}s`;
                card.classList.add('animate-in');
            });
        }
    }, 100);
}

// ======================== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ========================

function selectAdmin(admin) {
    AdminApp.selectedAdmin = admin;
    showModal();
}

function showModal() {
    if (!AdminApp.selectedAdmin) return;
    
    const modal = document.getElementById('modal-overlay');
    const adminTag = document.getElementById('modal-admin-tag');
    const adminDesc = document.getElementById('modal-admin-desc');
    
    if (adminTag) {
        adminTag.textContent = `#${AdminApp.selectedAdmin.tag}`;
    }
    
    if (adminDesc) {
        const role = AdminApp.selectedAdmin.role || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
        const description = AdminApp.selectedAdmin.description || role;
        
        adminDesc.innerHTML = `
            <div class="modal-admin-role">${escapeHtml(role)}</div>
            <div class="modal-admin-desc">${escapeHtml(description)}</div>
        `;
    }
    
    if (modal) {
        modal.classList.add('show');
    }
}

function hideModal() {
    const modal = document.getElementById('modal-overlay');
    if (modal) {
        modal.classList.remove('show');
    }
    AdminApp.selectedAdmin = null;
}

// ======================== –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –ê–î–ú–ò–ù–£ ========================

async function confirmSelection() {
    if (!AdminApp.selectedAdmin) return;
    
    const confirmBtn = document.getElementById('modal-confirm');
    const btnText = confirmBtn?.querySelector('.btn-text');
    const btnLoading = confirmBtn?.querySelector('.btn-loading');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (btnText) btnText.style.display = 'none';
    if (btnLoading) btnLoading.style.display = 'inline';
    if (confirmBtn) confirmBtn.disabled = true;
    
    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ API –±–æ—Ç–∞');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram WebApp API (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if (AdminApp.tg && AdminApp.tg.sendData) {
            const webAppData = {
                action: 'select_admin',
                admin_tag: AdminApp.selectedAdmin.tag
            };
            
            console.log('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram WebApp:', webAppData);
            AdminApp.tg.sendData(JSON.stringify(webAppData));
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp
            setTimeout(() => {
                if (AdminApp.tg.close) {
                    AdminApp.tg.close();
                }
            }, 1000);
            
            return;
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ HTTP API
        const requestData = {
            admin_tag: AdminApp.selectedAdmin.tag,
            user_data: AdminApp.tg ? AdminApp.tg.initDataUnsafe?.user : {
                id: Date.now(),
                first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–π—Ç–∞'
            }
        };
        
        const response = await fetch(`${AdminApp.API_BASE_URL}/select-admin`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert(`‚úÖ ${result.message}\\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω!`);
        } else {
            alert(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É.');
    } finally {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (btnText) btnText.style.display = 'inline';
        if (btnLoading) btnLoading.style.display = 'none';
        if (confirmBtn) confirmBtn.disabled = false;
        hideModal();
    }
}

// ======================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ========================

function setupEventHandlers() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', (e) => {
            e.preventDefault();
            switchTab(tab.dataset.tab);
        });
    });
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalOverlay = document.getElementById('modal-overlay');
    const modalCancel = document.getElementById('modal-cancel');
    const modalConfirm = document.getElementById('modal-confirm');
    
    if (modalCancel) {
        modalCancel.addEventListener('click', (e) => {
            e.preventDefault();
            hideModal();
        });
    }
    
    if (modalOverlay) {
        modalOverlay.addEventListener('click', (e) => {
            if (e.target === modalOverlay) {
                hideModal();
            }
        });
    }
    
    if (modalConfirm) {
        modalConfirm.addEventListener('click', (e) => {
            e.preventDefault();
            confirmSelection();
        });
    }
    
    // –ö–ª–∞–≤–∏—à–∞ Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            hideModal();
        }
    });
    
    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const refreshBtn = document.getElementById('refresh-admins');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', async (e) => {
            e.preventDefault();
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤...');
            await loadAdmins();
        });
    }
}

// ======================== TELEGRAM WEBAPP ========================

function initTelegramWebApp() {
    if (AdminApp.tg) {
        try {
            AdminApp.tg.expand();
            AdminApp.tg.ready();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            AdminApp.tg.setHeaderColor('#151729');
            AdminApp.tg.setBackgroundColor('#151729');
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π WebApp
            AdminApp.tg.onEvent('themeChanged', () => {
                console.log('üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:', AdminApp.tg.colorScheme);
            });
            
            AdminApp.tg.onEvent('viewportChanged', () => {
                console.log('üì± Viewport –∏–∑–º–µ–Ω–µ–Ω:', AdminApp.tg.viewportHeight);
            });
            
            console.log('üì± Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', AdminApp.tg.initDataUnsafe?.user);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp:', error);
        }
    } else {
        console.log('üåê –ó–∞–ø—É—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ - WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
}

// ======================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ========================

async function initApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ü–û–õ–ù–û–ô –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞');
    console.log('üîó API –±–æ—Ç–∞:', AdminApp.API_BASE_URL);
    console.log('üåê WebApp URL:', window.location.href);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    initTelegramWebApp();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventHandlers();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–æ—Ç–∞
    await loadAdmins();
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏!');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log(`üìä –ò—Ç–æ–≥–æ –∞–¥–º–∏–Ω–æ–≤: ${AdminApp.admins.length}`);
    console.log(`üì± Telegram WebApp: ${AdminApp.tg ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
}

// ======================== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ========================

window.addEventListener('error', (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', e.error);
});

window.addEventListener('unhandledrejection', (e) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', e.reason);
    e.preventDefault();
});

// ======================== –≠–ö–°–ü–û–†–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò ========================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
window.updateAdmins = function(adminsList) {
    console.log('üîÑ –í–Ω–µ—à–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤:', adminsList);
    AdminApp.admins = adminsList || [];
    renderAdmins();
};

// –≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
window.AdminApp = AdminApp;
window.loadAdmins = loadAdmins;
window.renderAdmins = renderAdmins;
window.switchTab = switchTab;

// ======================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ========================

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initApp);
} else {
    initApp();
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É (–Ω–∞ —Å–ª—É—á–∞–π –º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
setTimeout(() => {
    if (AdminApp.admins.length === 0) {
        console.log('‚è∞ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...');
        loadAdmins();
    }
}, 1000);
